{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Firas\\\\Desktop\\\\pi\\\\frontend\\\\src\\\\components\\\\ImageDropzone.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\nimport './ImageDropzone.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000';\nconst API_TIMEOUT = 30000;\nconst ImageDropzone = () => {\n  _s();\n  const [image, setImage] = useState(null);\n  const [previewUrl, setPreviewUrl] = useState(null);\n  const [processedImage, setProcessedImage] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const [backendStatus, setBackendStatus] = useState('checking');\n  const MAX_RETRIES = 3;\n  const [aiAnalysis, setAiAnalysis] = useState(null);\n\n  // Configure axios instance\n  const api = axios.create({\n    baseURL: API_BASE_URL,\n    timeout: API_TIMEOUT,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n  // Check backend connection\n  const checkBackendConnection = async () => {\n    try {\n      const response = await api.get('/api/test');\n      if (response.data.status === 'connected') {\n        setBackendStatus('connected');\n        setError(null);\n        return true;\n      }\n      throw new Error('Backend not ready');\n    } catch (err) {\n      setBackendStatus('disconnected');\n      setError('Cannot connect to backend service. Please ensure the server is running.');\n      return false;\n    }\n  };\n\n  // Check backend health\n  const checkBackendHealth = async () => {\n    try {\n      const response = await api.get('/api/health');\n      const status = response.data;\n      if (status.status === 'healthy') {\n        setBackendStatus('healthy');\n        setError(null);\n      } else if (status.status === 'degraded') {\n        setBackendStatus('degraded');\n        setError(`Backend service is degraded: ${status.message.join(', ')}`);\n      } else {\n        setBackendStatus('unhealthy');\n        setError(`Backend service is unhealthy: ${status.message.join(', ')}`);\n      }\n    } catch (err) {\n      setBackendStatus('error');\n      setError('Error checking backend health. Please try again later.');\n    }\n  };\n\n  // Initial connection and health check\n  useEffect(() => {\n    const initializeBackend = async () => {\n      const isConnected = await checkBackendConnection();\n      if (isConnected) {\n        await checkBackendHealth();\n      }\n    };\n    initializeBackend();\n    // Set up periodic health checks\n    const healthCheckInterval = setInterval(checkBackendHealth, 30000); // Check every 30 seconds\n\n    return () => clearInterval(healthCheckInterval);\n  }, []);\n  const onDrop = useCallback(acceptedFiles => {\n    if (acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      setImage(file);\n      setPreviewUrl(URL.createObjectURL(file));\n      // Reset previous results\n      setProcessedImage(null);\n      setAiAnalysis(null);\n    }\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif']\n    },\n    maxFiles: 1\n  });\n  const processImage = async (isRetry = false) => {\n    // First check if backend is available\n    if (backendStatus === 'disconnected') {\n      const isConnected = await checkBackendConnection();\n      if (!isConnected) {\n        return;\n      }\n    }\n    try {\n      if (!isRetry) {\n        setRetryCount(0);\n      }\n      setProcessing(true);\n      setError(null);\n      const formData = new FormData();\n      formData.append('image', image);\n      const response = await api.post('/api/process-image', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (response.data.success) {\n        setProcessedImage({\n          image: `data:image/jpeg;base64,${response.data.processed_image}`,\n          detections: response.data.detections\n        });\n        setAiAnalysis(response.data.ai_analysis);\n      } else {\n        throw new Error(response.data.error || 'Processing failed');\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message;\n      if (err.code === 'ECONNABORTED' || err.message.includes('Network Error')) {\n        await checkBackendConnection();\n        if (retryCount < MAX_RETRIES) {\n          setError(`Connection error. Retrying... (Attempt ${retryCount + 1}/${MAX_RETRIES})`);\n          setRetryCount(prev => prev + 1);\n          setTimeout(() => processImage(true), 2000);\n          return;\n        }\n      }\n      setError(`Error: ${errorMessage}. ${retryCount >= MAX_RETRIES ? 'Max retries reached.' : ''}`);\n    } finally {\n      if (retryCount >= MAX_RETRIES || !error) {\n        setProcessing(false);\n      }\n    }\n  };\n  const removeImage = () => {\n    setImage(null);\n    setPreviewUrl(null);\n    setProcessedImage(null);\n    setAiAnalysis(null);\n    if (previewUrl) {\n      URL.revokeObjectURL(previewUrl);\n    }\n  };\n  const groupDetectionsByModel = detections => {\n    return detections.reduce((acc, det) => {\n      if (!acc[det.model]) {\n        acc[det.model] = [];\n      }\n      acc[det.model].push(det);\n      return acc;\n    }, {});\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-dropzone-container\",\n    children: [backendStatus !== 'healthy' && backendStatus !== 'connected' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `status-message ${backendStatus}`,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: error || 'Checking backend status...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"retry-button\",\n        onClick: checkBackendConnection,\n        disabled: processing,\n        children: \"Check Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this), !image ? /*#__PURE__*/_jsxDEV(\"div\", {\n      ...getRootProps(),\n      className: `dropzone ${isDragActive ? 'active' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), isDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drop the image here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag and drop an image here, or click to select a file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview-card\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-image-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: (processedImage === null || processedImage === void 0 ? void 0 : processedImage.image) || previewUrl,\n              alt: \"preview\",\n              className: \"preview-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"preview-controls\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"process-button\",\n                onClick: processImage,\n                disabled: processing,\n                children: processing ? 'Processing...' : 'Process'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"remove-button\",\n                onClick: removeImage,\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this), (processedImage === null || processedImage === void 0 ? void 0 : processedImage.detections) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detections-box\",\n            children: Object.entries(groupDetectionsByModel(processedImage.detections)).map(([model, detections]) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"model-results\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: model === 'waste' ? 'Waste Detection' : model === 'medwaste' ? 'Medical Waste Detection' : 'Battery Detection'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 23\n              }, this), detections.map((det, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"detection-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"detection-class\",\n                  children: det.class_name.charAt(0).toUpperCase() + det.class_name.slice(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"detection-confidence\",\n                  children: [\"Confidence: \", (det.confidence * 100).toFixed(1), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 27\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 25\n              }, this))]\n            }, model, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), (processedImage === null || processedImage === void 0 ? void 0 : processedImage.detections) && (aiAnalysis === null || aiAnalysis === void 0 ? void 0 : aiAnalysis.success) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-analysis-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"AI Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-analysis-content\",\n            children: aiAnalysis.analysis.split('\\n').filter(line => line.trim() && !line.match(/^\\d+\\./)).map((line, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n              children: line\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 17\n          }, this), aiAnalysis.previous_analyses && aiAnalysis.previous_analyses.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"historical-analysis\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Historical Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 21\n            }, this), aiAnalysis.previous_analyses.map((analysis, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"historical-entry\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"historical-timestamp\",\n                children: new Date(analysis.timestamp).toLocaleString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"historical-content\",\n                children: analysis.analysis.split('\\n').filter(line => line.trim() && !line.match(/^\\d+\\./)).map((line, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: line\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 31\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 25\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [error, error.includes('Network error') && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"retry-button\",\n        onClick: () => processImage(true),\n        disabled: processing,\n        children: \"Retry Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageDropzone, \"JqDukQI67W++FK3u2Qw0YGZ6URY=\", false, function () {\n  return [useDropzone];\n});\n_c = ImageDropzone;\nexport default ImageDropzone;\nvar _c;\n$RefreshReg$(_c, \"ImageDropzone\");","map":{"version":3,"names":["React","useCallback","useState","useEffect","useDropzone","axios","jsxDEV","_jsxDEV","API_BASE_URL","API_TIMEOUT","ImageDropzone","_s","image","setImage","previewUrl","setPreviewUrl","processedImage","setProcessedImage","processing","setProcessing","error","setError","retryCount","setRetryCount","backendStatus","setBackendStatus","MAX_RETRIES","aiAnalysis","setAiAnalysis","api","create","baseURL","timeout","headers","checkBackendConnection","response","get","data","status","Error","err","checkBackendHealth","message","join","initializeBackend","isConnected","healthCheckInterval","setInterval","clearInterval","onDrop","acceptedFiles","length","file","URL","createObjectURL","getRootProps","getInputProps","isDragActive","accept","maxFiles","processImage","isRetry","formData","FormData","append","post","success","processed_image","detections","ai_analysis","_err$response","_err$response$data","errorMessage","code","includes","prev","setTimeout","removeImage","revokeObjectURL","groupDetectionsByModel","reduce","acc","det","model","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","src","alt","Object","entries","map","i","class_name","charAt","toUpperCase","slice","confidence","toFixed","analysis","split","filter","line","trim","match","previous_analyses","index","Date","timestamp","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Firas/Desktop/pi/frontend/src/components/ImageDropzone.js"],"sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\nimport './ImageDropzone.css';\n\nconst API_BASE_URL = 'http://localhost:5000';\nconst API_TIMEOUT = 30000;\n\nconst ImageDropzone = () => {\n  const [image, setImage] = useState(null);\n  const [previewUrl, setPreviewUrl] = useState(null);\n  const [processedImage, setProcessedImage] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const [backendStatus, setBackendStatus] = useState('checking');\n  const MAX_RETRIES = 3;\n  const [aiAnalysis, setAiAnalysis] = useState(null);\n\n  // Configure axios instance\n  const api = axios.create({\n    baseURL: API_BASE_URL,\n    timeout: API_TIMEOUT,\n    headers: {\n      'Content-Type': 'application/json',\n    }\n  });\n\n  // Check backend connection\n  const checkBackendConnection = async () => {\n    try {\n      const response = await api.get('/api/test');\n      if (response.data.status === 'connected') {\n        setBackendStatus('connected');\n        setError(null);\n        return true;\n      }\n      throw new Error('Backend not ready');\n    } catch (err) {\n      setBackendStatus('disconnected');\n      setError('Cannot connect to backend service. Please ensure the server is running.');\n      return false;\n    }\n  };\n\n  // Check backend health\n  const checkBackendHealth = async () => {\n    try {\n      const response = await api.get('/api/health');\n      const status = response.data;\n\n      if (status.status === 'healthy') {\n        setBackendStatus('healthy');\n        setError(null);\n      } else if (status.status === 'degraded') {\n        setBackendStatus('degraded');\n        setError(`Backend service is degraded: ${status.message.join(', ')}`);\n      } else {\n        setBackendStatus('unhealthy');\n        setError(`Backend service is unhealthy: ${status.message.join(', ')}`);\n      }\n    } catch (err) {\n      setBackendStatus('error');\n      setError('Error checking backend health. Please try again later.');\n    }\n  };\n\n  // Initial connection and health check\n  useEffect(() => {\n    const initializeBackend = async () => {\n      const isConnected = await checkBackendConnection();\n      if (isConnected) {\n        await checkBackendHealth();\n      }\n    };\n\n    initializeBackend();\n    // Set up periodic health checks\n    const healthCheckInterval = setInterval(checkBackendHealth, 30000); // Check every 30 seconds\n\n    return () => clearInterval(healthCheckInterval);\n  }, []);\n\n  const onDrop = useCallback((acceptedFiles) => {\n    if (acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      setImage(file);\n      setPreviewUrl(URL.createObjectURL(file));\n      // Reset previous results\n      setProcessedImage(null);\n      setAiAnalysis(null);\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif']\n    },\n    maxFiles: 1\n  });\n\n  const processImage = async (isRetry = false) => {\n    // First check if backend is available\n    if (backendStatus === 'disconnected') {\n      const isConnected = await checkBackendConnection();\n      if (!isConnected) {\n        return;\n      }\n    }\n\n    try {\n      if (!isRetry) {\n        setRetryCount(0);\n      }\n      setProcessing(true);\n      setError(null);\n\n      const formData = new FormData();\n      formData.append('image', image);\n\n      const response = await api.post('/api/process-image', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      if (response.data.success) {\n        setProcessedImage({\n          image: `data:image/jpeg;base64,${response.data.processed_image}`,\n          detections: response.data.detections\n        });\n        setAiAnalysis(response.data.ai_analysis);\n      } else {\n        throw new Error(response.data.error || 'Processing failed');\n      }\n    } catch (err) {\n      const errorMessage = err.response?.data?.error || err.message;\n      \n      if (err.code === 'ECONNABORTED' || err.message.includes('Network Error')) {\n        await checkBackendConnection();\n        if (retryCount < MAX_RETRIES) {\n          setError(`Connection error. Retrying... (Attempt ${retryCount + 1}/${MAX_RETRIES})`);\n          setRetryCount(prev => prev + 1);\n          setTimeout(() => processImage(true), 2000);\n          return;\n        }\n      }\n\n      setError(`Error: ${errorMessage}. ${retryCount >= MAX_RETRIES ? 'Max retries reached.' : ''}`);\n    } finally {\n      if (retryCount >= MAX_RETRIES || !error) {\n        setProcessing(false);\n      }\n    }\n  };\n\n  const removeImage = () => {\n    setImage(null);\n    setPreviewUrl(null);\n    setProcessedImage(null);\n    setAiAnalysis(null);\n    if (previewUrl) {\n      URL.revokeObjectURL(previewUrl);\n    }\n  };\n\n  const groupDetectionsByModel = (detections) => {\n    return detections.reduce((acc, det) => {\n      if (!acc[det.model]) {\n        acc[det.model] = [];\n      }\n      acc[det.model].push(det);\n      return acc;\n    }, {});\n  };\n\n  return (\n    <div className=\"image-dropzone-container\">\n      {backendStatus !== 'healthy' && backendStatus !== 'connected' && (\n        <div className={`status-message ${backendStatus}`}>\n          <span>{error || 'Checking backend status...'}</span>\n          <button \n            className=\"retry-button\"\n            onClick={checkBackendConnection}\n            disabled={processing}\n          >\n            Check Connection\n          </button>\n        </div>\n      )}\n      {!image ? (\n        <div {...getRootProps()} className={`dropzone ${isDragActive ? 'active' : ''}`}>\n          <input {...getInputProps()} />\n          {isDragActive ? (\n            <p>Drop the image here...</p>\n          ) : (\n            <p>Drag and drop an image here, or click to select a file</p>\n          )}\n        </div>\n      ) : (\n        <div className=\"preview-card\">\n          <div className=\"preview-content\">\n            <div className=\"left-section\">\n              <div className=\"preview-image-container\">\n                <img \n                  src={processedImage?.image || previewUrl} \n                  alt=\"preview\" \n                  className=\"preview-image\"\n                />\n                <div className=\"preview-controls\">\n                  <button \n                    className=\"process-button\"\n                    onClick={processImage}\n                    disabled={processing}\n                  >\n                    {processing ? 'Processing...' : 'Process'}\n                  </button>\n                  <button \n                    className=\"remove-button\"\n                    onClick={removeImage}\n                  >\n                    ×\n                  </button>\n                </div>\n              </div>\n              {processedImage?.detections && (\n                <div className=\"detections-box\">\n                  {Object.entries(groupDetectionsByModel(processedImage.detections)).map(([model, detections]) => (\n                    <div key={model} className=\"model-results\">\n                      <h4>{model === 'waste' ? 'Waste Detection' : \n                           model === 'medwaste' ? 'Medical Waste Detection' : \n                           'Battery Detection'}</h4>\n                      {detections.map((det, i) => (\n                        <div key={i} className=\"detection-item\">\n                          <span className=\"detection-class\">\n                            {det.class_name.charAt(0).toUpperCase() + det.class_name.slice(1)}\n                          </span>\n                          <span className=\"detection-confidence\">\n                            Confidence: {(det.confidence * 100).toFixed(1)}%\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            {processedImage?.detections && aiAnalysis?.success && (\n              <div className=\"ai-analysis-box\">\n                <h4>AI Analysis</h4>\n                <div className=\"ai-analysis-content\">\n                  {aiAnalysis.analysis\n                    .split('\\n')\n                    .filter(line => line.trim() && !line.match(/^\\d+\\./))\n                    .map((line, i) => (\n                      <p key={i}>{line}</p>\n                    ))}\n                </div>\n                {aiAnalysis.previous_analyses && aiAnalysis.previous_analyses.length > 0 && (\n                  <div className=\"historical-analysis\">\n                    <h4>Historical Analysis</h4>\n                    {aiAnalysis.previous_analyses.map((analysis, index) => (\n                      <div key={index} className=\"historical-entry\">\n                        <div className=\"historical-timestamp\">\n                          {new Date(analysis.timestamp).toLocaleString()}\n                        </div>\n                        <div className=\"historical-content\">\n                          {analysis.analysis\n                            .split('\\n')\n                            .filter(line => line.trim() && !line.match(/^\\d+\\./))\n                            .map((line, i) => (\n                              <p key={i}>{line}</p>\n                            ))}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      {error && (\n        <div className=\"error-message\">\n          {error}\n          {error.includes('Network error') && (\n            <button \n              className=\"retry-button\"\n              onClick={() => processImage(true)}\n              disabled={processing}\n            >\n              Retry Now\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImageDropzone; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}