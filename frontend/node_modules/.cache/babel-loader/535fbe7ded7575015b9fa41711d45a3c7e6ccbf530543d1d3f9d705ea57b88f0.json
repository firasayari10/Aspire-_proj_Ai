{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Firas\\\\Desktop\\\\pi\\\\frontend\\\\src\\\\components\\\\ImageDropzone.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\nimport './ImageDropzone.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageDropzone = () => {\n  _s();\n  const [image, setImage] = useState(null);\n  const [previewUrl, setPreviewUrl] = useState(null);\n  const [processedImage, setProcessedImage] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const MAX_RETRIES = 3;\n  const [aiAnalysis, setAiAnalysis] = useState(null);\n  const onDrop = useCallback(acceptedFiles => {\n    if (acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      setImage(file);\n      setPreviewUrl(URL.createObjectURL(file));\n      // Reset previous results\n      setProcessedImage(null);\n      setAiAnalysis(null);\n    }\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif']\n    },\n    maxFiles: 1\n  });\n  const processImage = async (isRetry = false) => {\n    try {\n      if (!isRetry) {\n        setRetryCount(0);\n      }\n      setProcessing(true);\n      setError(null);\n      const formData = new FormData();\n      formData.append('image', image);\n      const response = await axios.post('http://localhost:5000/api/process-image', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 30000 // 30 second timeout\n      });\n      if (response.data.success) {\n        setProcessedImage({\n          image: `data:image/jpeg;base64,${response.data.processed_image}`,\n          detections: response.data.detections\n        });\n        setAiAnalysis(response.data.ai_analysis);\n      } else {\n        throw new Error(response.data.error || 'Processing failed');\n      }\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message;\n      const errorType = (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error_type;\n\n      // Handle network errors with retry\n      if ((err.code === 'ECONNABORTED' || errorType === 'ConnectionError' || err.message.includes('Network Error')) && retryCount < MAX_RETRIES) {\n        setError(`Network error. Retrying... (Attempt ${retryCount + 1}/${MAX_RETRIES})`);\n        setRetryCount(prev => prev + 1);\n        setTimeout(() => processImage(true), 2000); // Retry after 2 seconds\n        return;\n      }\n      setError(`Error: ${errorMessage}. ${retryCount >= MAX_RETRIES ? 'Max retries reached.' : ''}`);\n    } finally {\n      if (retryCount >= MAX_RETRIES || !error) {\n        setProcessing(false);\n      }\n    }\n  };\n\n  // Add health check on component mount\n  useEffect(() => {\n    const checkBackendHealth = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/health');\n        if (response.data.status !== 'healthy') {\n          setError('Backend service is not fully operational. Some features may be limited.');\n        }\n      } catch (err) {\n        setError('Cannot connect to backend service. Please try again later.');\n      }\n    };\n    checkBackendHealth();\n  }, []);\n  const removeImage = () => {\n    setImage(null);\n    setPreviewUrl(null);\n    setProcessedImage(null);\n    setAiAnalysis(null);\n    if (previewUrl) {\n      URL.revokeObjectURL(previewUrl);\n    }\n  };\n  const groupDetectionsByModel = detections => {\n    return detections.reduce((acc, det) => {\n      if (!acc[det.model]) {\n        acc[det.model] = [];\n      }\n      acc[det.model].push(det);\n      return acc;\n    }, {});\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-dropzone-container\",\n    children: [!image ? /*#__PURE__*/_jsxDEV(\"div\", {\n      ...getRootProps(),\n      className: `dropzone ${isDragActive ? 'active' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), isDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drop the image here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag and drop an image here, or click to select a file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview-card\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-image-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: (processedImage === null || processedImage === void 0 ? void 0 : processedImage.image) || previewUrl,\n              alt: \"preview\",\n              className: \"preview-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"preview-controls\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"process-button\",\n                onClick: processImage,\n                disabled: processing,\n                children: processing ? 'Processing...' : 'Process'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"remove-button\",\n                onClick: removeImage,\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), (processedImage === null || processedImage === void 0 ? void 0 : processedImage.detections) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detections-box\",\n            children: Object.entries(groupDetectionsByModel(processedImage.detections)).map(([model, detections]) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"model-results\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: model === 'waste' ? 'Waste Detection' : model === 'medwaste' ? 'Medical Waste Detection' : 'Battery Detection'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 23\n              }, this), detections.map((det, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"detection-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"detection-class\",\n                  children: det.class_name.charAt(0).toUpperCase() + det.class_name.slice(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"detection-confidence\",\n                  children: [\"Confidence: \", (det.confidence * 100).toFixed(1), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 27\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 25\n              }, this))]\n            }, model, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), (processedImage === null || processedImage === void 0 ? void 0 : processedImage.detections) && (aiAnalysis === null || aiAnalysis === void 0 ? void 0 : aiAnalysis.success) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-analysis-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"AI Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-analysis-content\",\n            children: aiAnalysis.analysis.split('\\n').filter(line => line.trim() && !line.match(/^\\d+\\./)).map((line, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n              children: line\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 17\n          }, this), aiAnalysis.previous_analyses && aiAnalysis.previous_analyses.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"historical-analysis\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Historical Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 21\n            }, this), aiAnalysis.previous_analyses.map((analysis, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"historical-entry\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"historical-timestamp\",\n                children: new Date(analysis.timestamp).toLocaleString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"historical-content\",\n                children: analysis.analysis.split('\\n').filter(line => line.trim() && !line.match(/^\\d+\\./)).map((line, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: line\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 31\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 25\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [error, error.includes('Network error') && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"retry-button\",\n        onClick: () => processImage(true),\n        disabled: processing,\n        children: \"Retry Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageDropzone, \"2wGrHlBWwuCwrEpEeUTUXGHC6K0=\", false, function () {\n  return [useDropzone];\n});\n_c = ImageDropzone;\nexport default ImageDropzone;\nvar _c;\n$RefreshReg$(_c, \"ImageDropzone\");","map":{"version":3,"names":["React","useCallback","useState","useEffect","useDropzone","axios","jsxDEV","_jsxDEV","ImageDropzone","_s","image","setImage","previewUrl","setPreviewUrl","processedImage","setProcessedImage","processing","setProcessing","error","setError","retryCount","setRetryCount","MAX_RETRIES","aiAnalysis","setAiAnalysis","onDrop","acceptedFiles","length","file","URL","createObjectURL","getRootProps","getInputProps","isDragActive","accept","maxFiles","processImage","isRetry","formData","FormData","append","response","post","headers","timeout","data","success","processed_image","detections","ai_analysis","Error","err","_err$response","_err$response$data","_err$response2","_err$response2$data","errorMessage","message","errorType","error_type","code","includes","prev","setTimeout","checkBackendHealth","get","status","removeImage","revokeObjectURL","groupDetectionsByModel","reduce","acc","det","model","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onClick","disabled","Object","entries","map","i","class_name","charAt","toUpperCase","slice","confidence","toFixed","analysis","split","filter","line","trim","match","previous_analyses","index","Date","timestamp","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Firas/Desktop/pi/frontend/src/components/ImageDropzone.js"],"sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\nimport './ImageDropzone.css';\n\nconst ImageDropzone = () => {\n  const [image, setImage] = useState(null);\n  const [previewUrl, setPreviewUrl] = useState(null);\n  const [processedImage, setProcessedImage] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const MAX_RETRIES = 3;\n  const [aiAnalysis, setAiAnalysis] = useState(null);\n\n  const onDrop = useCallback((acceptedFiles) => {\n    if (acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      setImage(file);\n      setPreviewUrl(URL.createObjectURL(file));\n      // Reset previous results\n      setProcessedImage(null);\n      setAiAnalysis(null);\n    }\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif']\n    },\n    maxFiles: 1\n  });\n\n  const processImage = async (isRetry = false) => {\n    try {\n      if (!isRetry) {\n        setRetryCount(0);\n      }\n      setProcessing(true);\n      setError(null);\n\n      const formData = new FormData();\n      formData.append('image', image);\n\n      const response = await axios.post('http://localhost:5000/api/process-image', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        timeout: 30000, // 30 second timeout\n      });\n\n      if (response.data.success) {\n        setProcessedImage({\n          image: `data:image/jpeg;base64,${response.data.processed_image}`,\n          detections: response.data.detections\n        });\n        setAiAnalysis(response.data.ai_analysis);\n      } else {\n        throw new Error(response.data.error || 'Processing failed');\n      }\n    } catch (err) {\n      const errorMessage = err.response?.data?.error || err.message;\n      const errorType = err.response?.data?.error_type;\n      \n      // Handle network errors with retry\n      if (\n        (err.code === 'ECONNABORTED' || \n         errorType === 'ConnectionError' ||\n         err.message.includes('Network Error')) &&\n        retryCount < MAX_RETRIES\n      ) {\n        setError(`Network error. Retrying... (Attempt ${retryCount + 1}/${MAX_RETRIES})`);\n        setRetryCount(prev => prev + 1);\n        setTimeout(() => processImage(true), 2000); // Retry after 2 seconds\n        return;\n      }\n\n      setError(\n        `Error: ${errorMessage}. ${\n          retryCount >= MAX_RETRIES ? 'Max retries reached.' : ''\n        }`\n      );\n    } finally {\n      if (retryCount >= MAX_RETRIES || !error) {\n        setProcessing(false);\n      }\n    }\n  };\n\n  // Add health check on component mount\n  useEffect(() => {\n    const checkBackendHealth = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/health');\n        if (response.data.status !== 'healthy') {\n          setError('Backend service is not fully operational. Some features may be limited.');\n        }\n      } catch (err) {\n        setError('Cannot connect to backend service. Please try again later.');\n      }\n    };\n\n    checkBackendHealth();\n  }, []);\n\n  const removeImage = () => {\n    setImage(null);\n    setPreviewUrl(null);\n    setProcessedImage(null);\n    setAiAnalysis(null);\n    if (previewUrl) {\n      URL.revokeObjectURL(previewUrl);\n    }\n  };\n\n  const groupDetectionsByModel = (detections) => {\n    return detections.reduce((acc, det) => {\n      if (!acc[det.model]) {\n        acc[det.model] = [];\n      }\n      acc[det.model].push(det);\n      return acc;\n    }, {});\n  };\n\n  return (\n    <div className=\"image-dropzone-container\">\n      {!image ? (\n        <div {...getRootProps()} className={`dropzone ${isDragActive ? 'active' : ''}`}>\n          <input {...getInputProps()} />\n          {isDragActive ? (\n            <p>Drop the image here...</p>\n          ) : (\n            <p>Drag and drop an image here, or click to select a file</p>\n          )}\n        </div>\n      ) : (\n        <div className=\"preview-card\">\n          <div className=\"preview-content\">\n            <div className=\"left-section\">\n              <div className=\"preview-image-container\">\n                <img \n                  src={processedImage?.image || previewUrl} \n                  alt=\"preview\" \n                  className=\"preview-image\"\n                />\n                <div className=\"preview-controls\">\n                  <button \n                    className=\"process-button\"\n                    onClick={processImage}\n                    disabled={processing}\n                  >\n                    {processing ? 'Processing...' : 'Process'}\n                  </button>\n                  <button \n                    className=\"remove-button\"\n                    onClick={removeImage}\n                  >\n                    ×\n                  </button>\n                </div>\n              </div>\n              {processedImage?.detections && (\n                <div className=\"detections-box\">\n                  {Object.entries(groupDetectionsByModel(processedImage.detections)).map(([model, detections]) => (\n                    <div key={model} className=\"model-results\">\n                      <h4>{model === 'waste' ? 'Waste Detection' : \n                           model === 'medwaste' ? 'Medical Waste Detection' : \n                           'Battery Detection'}</h4>\n                      {detections.map((det, i) => (\n                        <div key={i} className=\"detection-item\">\n                          <span className=\"detection-class\">\n                            {det.class_name.charAt(0).toUpperCase() + det.class_name.slice(1)}\n                          </span>\n                          <span className=\"detection-confidence\">\n                            Confidence: {(det.confidence * 100).toFixed(1)}%\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            {processedImage?.detections && aiAnalysis?.success && (\n              <div className=\"ai-analysis-box\">\n                <h4>AI Analysis</h4>\n                <div className=\"ai-analysis-content\">\n                  {aiAnalysis.analysis\n                    .split('\\n')\n                    .filter(line => line.trim() && !line.match(/^\\d+\\./))\n                    .map((line, i) => (\n                      <p key={i}>{line}</p>\n                    ))}\n                </div>\n                {aiAnalysis.previous_analyses && aiAnalysis.previous_analyses.length > 0 && (\n                  <div className=\"historical-analysis\">\n                    <h4>Historical Analysis</h4>\n                    {aiAnalysis.previous_analyses.map((analysis, index) => (\n                      <div key={index} className=\"historical-entry\">\n                        <div className=\"historical-timestamp\">\n                          {new Date(analysis.timestamp).toLocaleString()}\n                        </div>\n                        <div className=\"historical-content\">\n                          {analysis.analysis\n                            .split('\\n')\n                            .filter(line => line.trim() && !line.match(/^\\d+\\./))\n                            .map((line, i) => (\n                              <p key={i}>{line}</p>\n                            ))}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      {error && (\n        <div className=\"error-message\">\n          {error}\n          {error.includes('Network error') && (\n            <button \n              className=\"retry-button\"\n              onClick={() => processImage(true)}\n              disabled={processing}\n            >\n              Retry Now\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImageDropzone; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}